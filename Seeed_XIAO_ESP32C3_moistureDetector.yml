substitutions:
  name: esphome-web-86ab8c
  friendly_name: Seeed XIAO ESP32C3
  interval: 5s

esphome:
  name: ${name}
  friendly_name: ${friendly_name}
  min_version: 2024.6.0
  name_add_mac_suffix: false
  project:
    name: esphome.web
    version: dev

esp32:
  board: esp32-c3-devkitm-1
  framework:
    type: arduino

# Enable logging
logger:

# Enable Home Assistant API
api:

# Allow Over-The-Air updates
ota:
- platform: esphome

# Allow provisioning Wi-Fi via serial
improv_serial:

wifi:
  # Set up a wifi access point
  ap: {}
  manual_ip:
    static_ip: 192.168.4.110
    gateway: 192.168.4.1
    subnet: 255.255.255.0

# In combination with the `ap` this allows the user
# to provision wifi credentials to the device via WiFi AP.
captive_portal:

dashboard_import:
  package_import_url: github://esphome/firmware/esphome-web/esp32c3.yaml@main
  import_full_config: true

# Sets up Bluetooth LE (Only on ESP32) to allow the user
# to provision wifi credentials to the device.
esp32_improv:
  authorizer: none

# To have a "next url" for improv serial
web_server:

sensor:
  - platform: adc
    pin: 
      number: 3
      allow_other_uses: true
    name: "Soil Moisture"
    unit_of_measurement: "%"
    device_class: MOISTURE
    update_interval: ${interval}
    attenuation: 11db 
    filters:
      - calibrate_linear:
        - 1.37 ->  100.00 
        - 2.6 ->  0.00
      - lambda: |
          if (x < 0) return 0; 
          else if (x > 100) return 100;
          else return (x);
      - median:
          window_size: 7
          send_every: 4
          send_first_at: 3
    accuracy_decimals: 0
    id: moisture_sensor
 
  - platform: adc
    pin: 
      number: 3
      allow_other_uses: true
    name: "Sensor Voltage"
    update_interval: ${interval}
    attenuation: 11db #required
    filters:
      - median:
          window_size: 7
          send_every: 4
          send_first_at: 3
    accuracy_decimals: 0


  - platform: wifi_signal
    name: "WiFi Signal"
    update_interval: ${interval}
    filters:
      - lambda: return min(max(2 * (x + 100.0), 0.0), 100.0);
      - median:
          window_size: 7
          send_every: 4
          send_first_at: 3
    unit_of_measurement: "Signal %"
    entity_category: "diagnostic"
  
  - platform: adc
    pin:
      number: 2
      allow_other_uses: true
    name: "Battery Life"
    unit_of_measurement: "%"
    device_class: BATTERY
    update_interval: ${interval}
    attenuation: 11db #required
    filters:
     - multiply: 2.0
     - median:
        window_size: 7
        send_every: 4
        send_first_at: 3
     - calibrate_polynomial: #set your own values here
        degree: 4
        datapoints:
        - 3.0 ->  10
        - 3.1 ->  20
        - 3.2 ->  30
        - 3.3 ->  50
        - 3.4 ->  60
        - 3.5 ->  75
        - 3.6 ->  90
        - 3.7 ->  100
     - lambda: |
        if (x < 0) return 0; 
        else if (x > 100) return 100;
        else return (x);

        
  - platform: adc
    pin: 
      number: 2
      allow_other_uses: true
    name: "Battery Voltage"
    update_interval: ${interval}
    attenuation: 11db #required
    filters:
     - multiply: 2.0
     - median:
        window_size: 7
        send_every: 4
        send_first_at: 3

# TODO: deep sleep with sensor turn on