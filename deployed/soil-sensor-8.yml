substitutions:
  name: "soil-sensor-8"
  friendly_name: "Soil Sensor 8"
  interval: 5s
  deep_sleep_run_duration: 15s
  deep_sleep_sleep_duration: 6h

esphome:
  name: ${name}
  friendly_name: ${friendly_name}
  min_version: 2024.6.0
  name_add_mac_suffix: false
  project:
    name: esphome.web
    version: dev
  on_boot:
    then:
      - switch.turn_on: sensor_power  # Power on sensor at boot
      # - logger.log: "Boot complete, sensor power ON"
      - script.execute: failsafe_sleep  # Start fallback timer to ensure sleep if Wi-Fi fails
  on_shutdown:
    then:
      - switch.turn_off: sensor_power  # Ensure sensor is powered off before deep sleep

esp32:
  board: esp32-c3-devkitm-1
  framework:
    type: arduino

# Uncomment below for USB/serial debugging
logger:
#   level: DEBUG

# Enable Home Assistant native API
api:

# Enable OTA firmware updates
ota:
  - platform: esphome

# improv_serial:  # Leave enabled only if provisioning Wi-Fi via USB
# esp32_improv:
#   authorizer: none  # Commented out to reduce power (BLE provisioning not needed)

wifi:
  ssid: !secret wifi_ssid
  password: !secret wifi_password
  fast_connect: true
  manual_ip:
    static_ip: 192.168.4.135
    gateway: 192.168.4.1
    subnet: 255.255.255.0
  on_connect:
    # - logger.log: "WiFi connected, cancelling failsafe."
    - script.stop: failsafe_sleep  # Cancel the failsafe if Wi-Fi connects

# Captive portal for provisioning fallback
captive_portal:

# Pre-built example template import
dashboard_import:
  package_import_url: github://esphome/firmware/esphome-web/esp32c3.yaml@main
  import_full_config: true

# web_server:  # Commented out to save power (used for browsing device config)

# Failsafe script: enters deep sleep if Wi-Fi not connected in 10s
script:
  - id: failsafe_sleep
    then:
      - delay: 10s
      # - logger.log: "WiFi not connected after 10s. Forcing deep sleep."
      - deep_sleep.enter: deep_sleep_1

# Sensor definitions
sensor:
  - platform: adc
    pin: 
      number: GPIO2
      allow_other_uses: true
    name: "Soil Moisture"
    unit_of_measurement: "%"
    device_class: MOISTURE
    update_interval: ${interval}
    attenuation: 12db      
    filters:
      - median:
          window_size: 5
          send_every: 1
          send_first_at: 1
      - calibrate_linear:
        - 1.00 ->  100.00 
        - 2.40 ->  0.00
      - lambda: |
          if (x < 0) return 0; 
          else if (x > 100) return 100;
          else return (x);
    accuracy_decimals: 0
 
  - platform: adc
    pin: 
      number: GPIO2
      allow_other_uses: true
    name: "Soil Sensor Voltage"
    update_interval: ${interval}
    attenuation: 12db
    filters:
      - median:
          window_size: 5
          send_every: 1
          send_first_at: 1

  - platform: wifi_signal
    name: "WiFi Signal"
    update_interval: ${interval}
    filters:
      - median:
          window_size: 5
          send_every: 1
          send_first_at: 1
      - lambda: return min(max(2 * (x + 100.0), 0.0), 100.0);
    unit_of_measurement: "Signal %"
    entity_category: "diagnostic"
  
  - platform: adc
    pin:
      number: GPIO4
      allow_other_uses: true
    name: "Battery Life"
    unit_of_measurement: "%"
    device_class: BATTERY
    update_interval: ${interval}
    attenuation: 12db
    filters:
      - median:
          window_size: 5
          send_every: 1
          send_first_at: 1
      - multiply: 2.0
      - calibrate_linear:
        - 3.6 ->  100.00 
        - 3.0 ->  0.00
      - lambda: |
          if (x < 0) return 0; 
          else if (x > 100) return 100;
          else return (x);
    accuracy_decimals: 0
        
  - platform: adc
    pin: 
      number: GPIO4
      allow_other_uses: true
    name: "Battery Voltage"
    update_interval: ${interval}
    attenuation: 12db
    filters:
      - median:
          window_size: 5
          send_every: 1
          send_first_at: 1
      - multiply: 2.0

# Control power to the soil sensor via GPIO
switch:
  - platform: gpio
    pin: GPIO3
    id: sensor_power
    internal: true

# Deep sleep: run briefly, then sleep long to conserve battery
deep_sleep:
  id: deep_sleep_1
  run_duration: ${deep_sleep_run_duration}
  sleep_duration: ${deep_sleep_sleep_duration}

# MQTT controls for remote wake/sleep via topics
mqtt:
  broker: 192.168.4.109
  username: !secret mqtt_username
  password: !secret mqtt_password
  on_message:
    - topic: ${name}/wake-mode
      payload: 'ON'
      then:
        - deep_sleep.prevent: deep_sleep_1
    - topic: ${name}/wake-mode
      payload: 'OFF'
      then:
        - deep_sleep.enter: deep_sleep_1
    - topic: all_soil_sensors/wake-mode
      payload: 'ON'
      then:
        - deep_sleep.prevent: deep_sleep_1
    - topic: all_soil_sensors/wake-mode
      payload: 'OFF'
      then:
        - deep_sleep.enter: deep_sleep_1
